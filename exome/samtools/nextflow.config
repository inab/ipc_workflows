
/*
========================================================================================
  Exome SAMtools Nextflow config file
========================================================================================
  Default config options for all compute environments
----------------------------------------------------------------------------------------
*/

// Global default params, used in configs
params {
  bam = ''
  fasta = ''

  // Defaults only, expecting to be overwritten
  max_memory                 = '128.GB'
  max_cpus                   = 16
  max_time                   = '240.h'
}

// Load base.config by default for all pipelines
// includeConfig 'conf/base.config'

// Load modules.config for DSL2 module specific options
// includeConfig 'conf/modules.config'

profiles {
  debug { process.beforeScript = 'echo $HOSTNAME' }
  singularity {
    singularity.enabled    = true
    singularity.autoMounts = true
    docker.enabled         = false
    podman.enabled         = false
    shifter.enabled        = false
    charliecloud.enabled   = false
  }
}

manifest {
    name = 'Exome SAMtools Workflow'
    author = 'Laura Rodriguez-Navas'
    homePage = 'https://github.com/inab/ipc_workflows/tree/main/exome/samtools'
    defaultBranch = 'main'
    mainScript = 'main.nf'
    nextflowVersion = '>=19.10.0'
    version = 1.0
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if (type == 'memory') {
    try {
      if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'time') {
    try {
      if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'cpus') {
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
